
brushless motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf3  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bab  00000000  00000000  0000109f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fc  00000000  00000000  00001c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00002048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059d  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011a  00000000  00000000  000026c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000027db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	d2 c0       	rjmp	.+420    	; 0x1ee <__vector_18>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	c2 c0       	rjmp	.+388    	; 0x1d6 <__vector_20>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	cc c0       	rjmp	.+408    	; 0x21e <__vector_33>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	bc c0       	rjmp	.+376    	; 0x206 <__vector_35>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	d0 c0       	rjmp	.+416    	; 0x24e <__vector_43>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c0 c0       	rjmp	.+384    	; 0x236 <__vector_45>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	b8 d0       	rcall	.+368    	; 0x266 <main>
  f6:	ca c0       	rjmp	.+404    	; 0x28c <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <init_timers>:
#include <avr/io.h>
#include <avr/interrupt.h>
#define F_CPU 16000000UL;

void init_timers(void){
	GTCCR = 1 << TSM | 1 <<	PSRSYNC;
  fa:	81 e8       	ldi	r24, 0x81	; 129
  fc:	83 bd       	out	0x23, r24	; 35
	
  TCCR1B |= 1 << WGM13 | 1 << WGM12 | 1 << CS10| 1 << CS11;
  fe:	e1 e8       	ldi	r30, 0x81	; 129
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8b 61       	ori	r24, 0x1B	; 27
 106:	80 83       	st	Z, r24
  TCCR3B |= 1 << WGM33 | 1 << WGM32 | 1 << CS30| 1 << CS31;
 108:	e1 e9       	ldi	r30, 0x91	; 145
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8b 61       	ori	r24, 0x1B	; 27
 110:	80 83       	st	Z, r24
  TCCR4B |= 1 << WGM43 | 1 << WGM42 | 1 << CS40| 1 << CS41; //prescaler N = 64
 112:	e1 ea       	ldi	r30, 0xA1	; 161
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8b 61       	ori	r24, 0x1B	; 27
 11a:	80 83       	st	Z, r24
  
  TCCR1A |= 1 << WGM11;
 11c:	e0 e8       	ldi	r30, 0x80	; 128
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	82 60       	ori	r24, 0x02	; 2
 124:	80 83       	st	Z, r24
  TCCR3A |= 1 << WGM31;
 126:	e0 e9       	ldi	r30, 0x90	; 144
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
  TCCR4A |=	1 << WGM41;
 130:	e0 ea       	ldi	r30, 0xA0	; 160
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	82 60       	ori	r24, 0x02	; 2
 138:	80 83       	st	Z, r24
  
  ICR1 =1250;
 13a:	e6 e8       	ldi	r30, 0x86	; 134
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	82 ee       	ldi	r24, 0xE2	; 226
 140:	94 e0       	ldi	r25, 0x04	; 4
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
  ICR3 = ICR1;
 146:	80 81       	ld	r24, Z
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 14e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
  ICR4 = ICR1;
 152:	80 81       	ld	r24, Z
 154:	91 81       	ldd	r25, Z+1	; 0x01
 156:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 15a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
  
  TIMSK1 =  1 << OCIE1B | 1 << TOIE1;
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
  TIMSK3 =  1 << OCIE3B | 1 << TOIE3;
 164:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
  TIMSK4 =  1 << OCIE4B | 1 << TOIE4;
 168:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
  
  OCR1B = ICR1 / 2;
 16c:	80 81       	ld	r24, Z
 16e:	91 81       	ldd	r25, Z+1	; 0x01
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 178:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
  OCR3B = ICR1 / 2;
 17c:	80 81       	ld	r24, Z
 17e:	91 81       	ldd	r25, Z+1	; 0x01
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 188:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
  OCR4B = ICR1 / 2;
 18c:	80 81       	ld	r24, Z
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 198:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
  
  TCNT1 = ICR1/6;     //shift left
 19c:	20 81       	ld	r18, Z
 19e:	31 81       	ldd	r19, Z+1	; 0x01
 1a0:	ab ea       	ldi	r26, 0xAB	; 171
 1a2:	ba ea       	ldi	r27, 0xAA	; 170
 1a4:	64 d0       	rcall	.+200    	; 0x26e <__umulhisi3>
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	e4 e8       	ldi	r30, 0x84	; 132
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	91 83       	std	Z+1, r25	; 0x01
 1b4:	80 83       	st	Z, r24
  TCNT3 = 0;    //stationary
 1b6:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 1ba:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
  TCNT4 = -1 * TCNT1;    //shift right the same amount
 1be:	80 81       	ld	r24, Z
 1c0:	91 81       	ldd	r25, Z+1	; 0x01
 1c2:	91 95       	neg	r25
 1c4:	81 95       	neg	r24
 1c6:	91 09       	sbc	r25, r1
 1c8:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 1cc:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
 
  GTCCR = 0;
 1d0:	13 bc       	out	0x23, r1	; 35
  sei();
 1d2:	78 94       	sei
 1d4:	08 95       	ret

000001d6 <__vector_20>:
}

ISR(TIMER1_OVF_vect){
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
	//put your if here
	PORTC |= 0b00000010;
 1e0:	41 9a       	sbi	0x08, 1	; 8
	PORTC &= 0b11011111;
 1e2:	45 98       	cbi	0x08, 5	; 8
}
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <__vector_18>:

ISR(TIMER1_COMPB_vect){
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
	PORTC |= 0b00010000;
 1f8:	44 9a       	sbi	0x08, 4	; 8
	PORTC &= 0b11111011;
 1fa:	42 98       	cbi	0x08, 2	; 8
}
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_35>:

ISR(TIMER3_OVF_vect){
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
	PORTC |= 0b00000100;
 210:	42 9a       	sbi	0x08, 2	; 8
	PORTC &= 0b10111111;
 212:	46 98       	cbi	0x08, 6	; 8
}
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__vector_33>:

ISR(TIMER3_COMPB_vect){
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
	PORTC |= 0b00100000;
 228:	45 9a       	sbi	0x08, 5	; 8
	PORTC &= 0b11110111;
 22a:	43 98       	cbi	0x08, 3	; 8
}
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_45>:

ISR(TIMER4_OVF_vect){
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
	PORTC |= 0b00001000;
 240:	43 9a       	sbi	0x08, 3	; 8
	PORTC &= 0b11111101;
 242:	41 98       	cbi	0x08, 1	; 8
}
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_43>:

ISR(TIMER4_COMPB_vect){
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
	PORTC |= 0b01000000;
 258:	46 9a       	sbi	0x08, 6	; 8
	PORTC &= 0b11101111;
 25a:	44 98       	cbi	0x08, 4	; 8
}
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <main>:



int main(void)
{
	DDRC = 0b01111110;
 266:	8e e7       	ldi	r24, 0x7E	; 126
 268:	87 b9       	out	0x07, r24	; 7
	init_timers();
 26a:	47 df       	rcall	.-370    	; 0xfa <init_timers>
 26c:	ff cf       	rjmp	.-2      	; 0x26c <main+0x6>

0000026e <__umulhisi3>:
 26e:	a2 9f       	mul	r26, r18
 270:	b0 01       	movw	r22, r0
 272:	b3 9f       	mul	r27, r19
 274:	c0 01       	movw	r24, r0
 276:	a3 9f       	mul	r26, r19
 278:	70 0d       	add	r23, r0
 27a:	81 1d       	adc	r24, r1
 27c:	11 24       	eor	r1, r1
 27e:	91 1d       	adc	r25, r1
 280:	b2 9f       	mul	r27, r18
 282:	70 0d       	add	r23, r0
 284:	81 1d       	adc	r24, r1
 286:	11 24       	eor	r1, r1
 288:	91 1d       	adc	r25, r1
 28a:	08 95       	ret

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
