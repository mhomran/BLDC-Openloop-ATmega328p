
120 conduction 3 phase inverter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c91  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bad  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000335  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000581  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00002469  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 30       	cpi	r26, 0x00	; 0
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	89 d0       	rcall	.+274    	; 0x218 <main>
 106:	a4 c0       	rjmp	.+328    	; 0x250 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <init_timers>:
#define F_CPU 16000000UL;

volatile float adc10;

void init_timers(void){
  GTCCR |= 1 << TSM | 1 << PSRSYNC;
 10a:	83 b5       	in	r24, 0x23	; 35
 10c:	81 68       	ori	r24, 0x81	; 129
 10e:	83 bd       	out	0x23, r24	; 35
  
  TCCR1B |=1 << WGM13 | 1 << CS10| 1 << CS11;
 110:	e1 e8       	ldi	r30, 0x81	; 129
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	83 61       	ori	r24, 0x13	; 19
 118:	80 83       	st	Z, r24
  TCCR3B |= 1 << WGM33 | 1 << CS30| 1 << CS31;
 11a:	e1 e9       	ldi	r30, 0x91	; 145
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	83 61       	ori	r24, 0x13	; 19
 122:	80 83       	st	Z, r24
  TCCR4B |= 1 << WGM43 | 1 << CS40| 1 << CS41; //prescaler N = 64
 124:	e1 ea       	ldi	r30, 0xA1	; 161
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	83 61       	ori	r24, 0x13	; 19
 12c:	80 83       	st	Z, r24
  ICR1 = 125;  //1000 Hz TOP=F_CPU/2/N/frquency
 12e:	e6 e8       	ldi	r30, 0x86	; 134
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	8d e7       	ldi	r24, 0x7D	; 125
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	91 83       	std	Z+1, r25	; 0x01
 138:	80 83       	st	Z, r24
  ICR3 = ICR1;
 13a:	80 81       	ld	r24, Z
 13c:	91 81       	ldd	r25, Z+1	; 0x01
 13e:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 142:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
  ICR4 = ICR1;
 146:	80 81       	ld	r24, Z
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 14e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
  TCCR1A |= 1 << COM1A1 | 1 << COM1A0 | 1 << COM1B1;
 152:	a0 e8       	ldi	r26, 0x80	; 128
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	8c 91       	ld	r24, X
 158:	80 6e       	ori	r24, 0xE0	; 224
 15a:	8c 93       	st	X, r24
  TCCR3A |= 1 << COM3A1 | 1 << COM3A0 | 1 << COM3B1;
 15c:	a0 e9       	ldi	r26, 0x90	; 144
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	8c 91       	ld	r24, X
 162:	80 6e       	ori	r24, 0xE0	; 224
 164:	8c 93       	st	X, r24
  TCCR4A |= 1 << COM4A1 | 1 << COM4A0 | 1 << COM4B1;
 166:	a0 ea       	ldi	r26, 0xA0	; 160
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	8c 91       	ld	r24, X
 16c:	80 6e       	ori	r24, 0xE0	; 224
 16e:	8c 93       	st	X, r24
  OCR1A = ICR1 * 2 /3 +1;
 170:	20 81       	ld	r18, Z
 172:	31 81       	ldd	r19, Z+1	; 0x01
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	ab ea       	ldi	r26, 0xAB	; 171
 17a:	ba ea       	ldi	r27, 0xAA	; 170
 17c:	5a d0       	rcall	.+180    	; 0x232 <__umulhisi3>
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	a8 e8       	ldi	r26, 0x88	; 136
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	11 96       	adiw	r26, 0x01	; 1
 18a:	9c 93       	st	X, r25
 18c:	8e 93       	st	-X, r24
  OCR3A = OCR1A; // +1 and -1 to add some dead time between switches
 18e:	8d 91       	ld	r24, X+
 190:	9c 91       	ld	r25, X
 192:	11 97       	sbiw	r26, 0x01	; 1
 194:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 198:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
  OCR4A = OCR1A; 
 19c:	8d 91       	ld	r24, X+
 19e:	9c 91       	ld	r25, X
 1a0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 1a4:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
  OCR1B = ICR1/3 - 1;
 1a8:	20 81       	ld	r18, Z
 1aa:	31 81       	ldd	r19, Z+1	; 0x01
 1ac:	ab ea       	ldi	r26, 0xAB	; 171
 1ae:	ba ea       	ldi	r27, 0xAA	; 170
 1b0:	40 d0       	rcall	.+128    	; 0x232 <__umulhisi3>
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 1bc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
  OCR3B = ICR1/3 - 1;
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	36 d0       	rcall	.+108    	; 0x232 <__umulhisi3>
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 1d0:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
  OCR4B = ICR1/3 - 1;
 1d4:	20 81       	ld	r18, Z
 1d6:	31 81       	ldd	r19, Z+1	; 0x01
 1d8:	2c d0       	rcall	.+88     	; 0x232 <__umulhisi3>
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 1e4:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
  TCNT1 = ICR1/3;     //shift left //initial value 50% shift
 1e8:	20 81       	ld	r18, Z
 1ea:	31 81       	ldd	r19, Z+1	; 0x01
 1ec:	22 d0       	rcall	.+68     	; 0x232 <__umulhisi3>
 1ee:	96 95       	lsr	r25
 1f0:	87 95       	ror	r24
 1f2:	e4 e8       	ldi	r30, 0x84	; 132
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	91 83       	std	Z+1, r25	; 0x01
 1f8:	80 83       	st	Z, r24
 1fa:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
  TCNT3 = 0;    //stationary 
 1fe:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 202:	80 81       	ld	r24, Z
  TCNT4 = -1 * TCNT1;     //shift right the same amount
 204:	91 81       	ldd	r25, Z+1	; 0x01
 206:	91 95       	neg	r25
 208:	81 95       	neg	r24
 20a:	91 09       	sbc	r25, r1
 20c:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 210:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
 214:	13 bc       	out	0x23, r1	; 35
  
  GTCCR = 0;
 216:	08 95       	ret

00000218 <main>:
 218:	84 b1       	in	r24, 0x04	; 4

int main(void)
{ //switch >> OCnX >> PXN >> arduino mega pin
  //1 >> OC1A >> PB5 >> 11; 2 >> OC3A >> PE3 >> 5;  3 >> OC4A >> PH3 >> 6;
  //4 >> OC1B >> PB6 >> 12; 5 >> OC3B >> PE4 >> 2;  6 >> OC4B >> PH4 >> 7;
  DDRB |= 1 << PINB5 | 1 << PINB6;
 21a:	80 66       	ori	r24, 0x60	; 96
 21c:	84 b9       	out	0x04, r24	; 4
  DDRE |= 1 << PINE3 | 1 << PINE4;
 21e:	8d b1       	in	r24, 0x0d	; 13
 220:	88 61       	ori	r24, 0x18	; 24
 222:	8d b9       	out	0x0d, r24	; 13
  DDRH |= 1 << PINH3 | 1 << PINH4;
 224:	e1 e0       	ldi	r30, 0x01	; 1
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	80 81       	ld	r24, Z
 22a:	88 61       	ori	r24, 0x18	; 24
 22c:	80 83       	st	Z, r24
  
  //init_adc();
  //init_int0();
  init_timers();
 22e:	6d df       	rcall	.-294    	; 0x10a <init_timers>
 230:	ff cf       	rjmp	.-2      	; 0x230 <main+0x18>

00000232 <__umulhisi3>:
 232:	a2 9f       	mul	r26, r18
 234:	b0 01       	movw	r22, r0
 236:	b3 9f       	mul	r27, r19
 238:	c0 01       	movw	r24, r0
 23a:	a3 9f       	mul	r26, r19
 23c:	70 0d       	add	r23, r0
 23e:	81 1d       	adc	r24, r1
 240:	11 24       	eor	r1, r1
 242:	91 1d       	adc	r25, r1
 244:	b2 9f       	mul	r27, r18
 246:	70 0d       	add	r23, r0
 248:	81 1d       	adc	r24, r1
 24a:	11 24       	eor	r1, r1
 24c:	91 1d       	adc	r25, r1
 24e:	08 95       	ret

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
